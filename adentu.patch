diff --git src/adentu-atom-cuda.cu src/adentu-atom-cuda.cu
index c449253..466bb57 100644
--- src/adentu-atom-cuda.cu
+++ src/adentu-atom-cuda.cu
@@ -31,6 +31,7 @@
 #include "adentu-cuda-utils.h"
 
 extern "C" {
+    #include "vec3-cuda.h"
     #include "adentu-atom-cuda.h"
 }
 
@@ -62,9 +63,13 @@ void adentu_atom_cuda_set_init_vel (AdentuAtom *atoms, AdentuModel *model)
     CUDA_CALL (cudaMemcpy (d_vel, atoms->vel, nAtoms * sizeof (vec3f), cudaMemcpyHostToDevice));
 
     
-    dim3 gDim (1);
-    dim3 bDim (nAtoms);
+    vRand3f_cuda (d_vel, nAtoms);
+
+
+    dim3 gDim ;
+    dim3 bDim ;
 
+    adentu_cuda_set_grid (&gDim, &bDim, nAtoms);
 
     kernel1 <<<gDim, bDim>>> (d_vel, nAtoms, velInit);
     CUDA_CALL (cudaMemcpy (atoms->vel, d_vel, nAtoms * sizeof (vec3f), cudaMemcpyDeviceToHost));
@@ -179,7 +184,8 @@ void adentu_atom_cuda_set_init_pos (AdentuAtom *atoms, AdentuGrid *grid)
 
     curandGenerator_t gen;
     curandCreateGenerator (&gen, CURAND_RNG_PSEUDO_DEFAULT);
-    curandSetPseudoRandomGeneratorSeed (gen, time(NULL));
+    //curandSetPseudoRandomGeneratorSeed (gen, time(NULL));
+    curandSetPseudoRandomGeneratorSeed (gen, 1234567);
     curandGenerateUniformDouble (gen, d_rands, nAtoms * 6);
     curandDestroyGenerator (gen);
 
diff --git src/adentu-grid-cuda.cu src/adentu-grid-cuda.cu
index 2544004..a7ec6b3 100644
--- src/adentu-grid-cuda.cu
+++ src/adentu-grid-cuda.cu
@@ -124,6 +124,7 @@ void adentu_grid_cuda_set_atoms (AdentuGrid *grid,
     CUDA_CALL (cudaFree (d_cellNAtoms));
     CUDA_CALL (cudaFree (d_head));
     CUDA_CALL (cudaFree (d_linked));
+
 }
 
 
diff --git src/adentu.c src/adentu.c
index e5fb79e..6cd54ae 100644
--- src/adentu.c
+++ src/adentu.c
@@ -60,10 +60,15 @@ AdentuEventHandler *handler[] = {
 
 int main (int argc, char *argv[])
 {
+    g_message ("Reseting CUDA Device.");
+    adentu_usr_cuda_reset_device ();
 
+    g_message ("Initializing adentu.");
     //set seeds
-    srand (time (NULL));
-    srand48 (time (NULL));
+    //srand (time (NULL));
+    //srand48 (time (NULL));
+    srand (1234567);
+    srand48 (1234567);
     /* leer configuraciÃ³n */
 
 
@@ -94,8 +99,8 @@ int main (int argc, char *argv[])
     /* creating grain grid */
     AdentuGridConfig gc;
     vecSet (gc.origin, 0.0, 0.0, 0.0);
-    vecSet (gc.length, 128.0, 128.0, 128.0);
-    vecSet (gc.cells, 8, 8, 8);
+    vecSet (gc.length, 3.1, 3.1, 3.1);
+    vecSet (gc.cells, 3, 3, 3);
     gc.type = ADENTU_GRID_DEFAULT;
 
     AdentuGrid g;
@@ -124,11 +129,11 @@ int main (int argc, char *argv[])
 
     /* create grains */
     AdentuAtomConfig ac;
-    ac.nAtoms = 512;
+    ac.nAtoms = 27;
     ac.type = ADENTU_ATOM_GRAIN;
     ac.mass.from = ac.mass.to = 5.0;
     ac.mass.rangeType = ADENTU_PROP_CONSTANT;
-    ac.radii.from = ac.radii.to = 1.0;
+    ac.radii.from = ac.radii.to = 0.500000;
     ac.radii.rangeType = ADENTU_PROP_CONSTANT;
 
     AdentuAtom a;
@@ -140,16 +145,16 @@ int main (int argc, char *argv[])
     m.grain = &a;
 
     /* set atoms into grid */
-    adentu_grid_set_atoms (&g, &a, &m.bCond);
+    //adentu_grid_set_atoms (&g, &a, &m.bCond);
 
 
     /****************************************************/
     /* creating fluid*/
-    ac.nAtoms = 1024;
+    ac.nAtoms = 64;
     ac.type = ADENTU_ATOM_FLUID;
     ac.mass.from = ac.mass.to = 0.5;
     ac.mass.rangeType = ADENTU_PROP_CONSTANT;
-    ac.radii.from = ac.radii.to = 0.001;
+    ac.radii.from = ac.radii.to = 0.00000000000000;
     ac.radii.rangeType = ADENTU_PROP_CONSTANT;
 
     AdentuAtom f;
@@ -157,8 +162,8 @@ int main (int argc, char *argv[])
     adentu_atom_set_init_vel (&f, &m);
     //adentu_atom_set_init_pos (&f, &fg);
     m.fluid = &f;
-    adentu_grid_set_atoms (&fg, &f, &m.bCond);
-    adentu_grid_set_atoms (&mpcg, &f, &m.bCond);
+    //adentu_grid_set_atoms (&fg, &f, &m.bCond);
+    //adentu_grid_set_atoms (&mpcg, &f, &m.bCond);
 
 
     adentu_usr_cuda_set_atoms_pos (&m);
diff --git src/event/adentu-event-gfc.c src/event/adentu-event-gfc.c
index 9ec0994..b412131 100644
--- src/event/adentu-event-gfc.c
+++ src/event/adentu-event-gfc.c
@@ -129,14 +129,14 @@ void adentu_event_gfc_attend2 (AdentuModel *model,
     
     if (fabs (pu - radius) > 10e-6)
         {
-            g_message ("Bad Prediction! - PU: %f != Radius: %f", pu, radius);
+            printf ("Bad Prediction! - PU: %f != Radius: %f\n", pu, radius);
             //return ;
         }
 
     vec3f n;
     vecScale (n, pos, pu);
    
-    g_message ("radius: %f, pu: %f, pos: (%f, %f, %f), n: (%f, %f, %f), vecDot (n, n) = %f", 
+    printf ("radius: %f, pu: %f, pos: (%f, %f, %f), n: (%f, %f, %f), vecDot (n, n) = %f\n", 
                 radius, pu, pos.x, pos.y, pos.z, n.x, n.y, n.z, vecDot (n, n));
 
     double VN = vecDot (n, vel);
diff --git src/event/adentu-event-ggc.c src/event/adentu-event-ggc.c
index 697cf72..c2b804d 100644
--- src/event/adentu-event-ggc.c
+++ src/event/adentu-event-ggc.c
@@ -120,14 +120,14 @@ void adentu_event_ggc_attend (AdentuModel *model,
     
     if (fabs (pu - radius) > 10e-6)
         {
-            g_message ("Bad Prediction! - PU: %f != Radius: %f", pu, radius);
+            printf ("Bad Prediction! - PU: %f != Radius: %f\n", pu, radius);
             //return ;
         }
 
     vec3f n;
     vecScale (n, pos, pu);
    
-    g_message ("radius: %f, pu: %f, pos: (%f, %f, %f), n: (%f, %f, %f), vecDot (n, n) = %f", 
+    printf ("radius: %f, pu: %f, pos: (%f, %f, %f), n: (%f, %f, %f), vecDot (n, n) = %f\n", 
                 radius, pu, pos.x, pos.y, pos.z, n.x, n.y, n.z, vecDot (n, n));
 
     double VN = vecDot (n, vel);
diff --git src/usr/atoms-pos-cuda.cu src/usr/atoms-pos-cuda.cu
index 9ee1e38..f033c9e 100644
--- src/usr/atoms-pos-cuda.cu
+++ src/usr/atoms-pos-cuda.cu
@@ -36,6 +36,17 @@ extern "C" {
 }
 
 
+
+
+extern "C"
+void adentu_usr_cuda_reset_device (void)
+{
+    cudaDeviceReset ();
+}
+
+
+
+
 int set_fluid_cell_with_particles (vec3f *pos,
                                    int nAtoms,
                                    int Nfcg,
@@ -75,7 +86,7 @@ void adentu_usr_cuda_set_atoms_pos (AdentuModel *model)
     double radius = grain->radius[0];
 
     AdentuGrid *gGrid = model->gGrid;
-    //AdentuGrid *fGrid = model->fGrid;
+    AdentuGrid *fGrid = model->fGrid;
 
     vec3f g_origin = gGrid->origin;
     //vec3f f_origin = fGrid->origin;
@@ -87,7 +98,7 @@ void adentu_usr_cuda_set_atoms_pos (AdentuModel *model)
     //vec3i f_nCell = fGrid->nCell;
 
     int g_tCell = gGrid->tCell;
-    //int f_tCell = fGrid->tCell;
+    int f_tCell = fGrid->tCell;
 
     vec3f g_h = gGrid->h;
     //vec3f f_h = fGrid->h;
@@ -96,16 +107,21 @@ void adentu_usr_cuda_set_atoms_pos (AdentuModel *model)
     int nFluids = fluid->n;
 
 
-    if (g_tCell > nGrains)
+    if (g_tCell < nGrains)
         g_error ("The number of atoms is greater than the number of grid cells.");
-    if (g_h.x < radius ||
-        g_h.y < radius ||
-        g_h.z < radius)
+    if (g_h.x < radius*2 ||
+        g_h.y < radius*2 ||
+        g_h.z < radius*2)
             g_error ("The size of the cells is less than the size of grain radius");
 
 
     int *g_head = gGrid->head;
-    //int *f_head = fGrid->head;
+    int *f_head = fGrid->head;
+
+    fGrid->linked = (int *) malloc (nFluids * sizeof (int));
+    //int *g_linked = gGrid->linked;
+    int *f_linked = fGrid->linked;
+    memset (f_linked, -1, nFluids * sizeof (int));
 
     int *d_g_head = NULL;
     //int *d_f_head = NULL;
@@ -155,6 +171,29 @@ void adentu_usr_cuda_set_atoms_pos (AdentuModel *model)
                            cudaMemcpyDeviceToHost));
 
 
+    /* print atoms in head */
+/*    for (int c = 0; c < g_tCell; ++c )
+        {
+            printf ("head[%d] - atom: %d, pos: (%f, %f, %f)\n", c, g_head[c],
+                    g_pos[c].x, g_pos[c].y, g_pos[c].z);
+        }
+
+    getchar ();
+
+    vec3f asdf;
+    for (int x = 0; x < g_tCell; ++x)
+        for (int y = x+1; y < g_tCell; ++y)
+            {
+                vecSub (asdf, g_pos[g_head[x]], g_pos[g_head[y]]);
+                if (vecMod (asdf) < 1.0)
+                    g_error ("X: %d, Y: %d, VecMod(X, Y): %f\n", g_head[x], g_head[y],
+                        vecMod (asdf));
+
+            }
+    getchar ();
+
+*/
+
 
     int atom = 0;
     for (int c = 0; c < g_tCell; ++c)
@@ -181,31 +220,68 @@ void adentu_usr_cuda_set_atoms_pos (AdentuModel *model)
         } 
 
 
+    for (int i = 0; i < nFluids; ++i)
+        printf (">%d pos (%f %f %f)\n", i, f_pos[i].x, f_pos[i].y, f_pos[i].z);
+
     int awef = nFluids - atom;
     while (awef)
-        for (int c = 0; c < g_tCell; ++c)
-            {
-                if (gGrid->head[c] != -1)
-                    atom = set_fluid_cell_with_particles (f_pos,
-                                                          nFluids,
-                                                          1,
-                                                          c,
-                                                          g_nCell,
-                                                          g_origin,
-                                                          g_h,
-                                                          atom,
-                                                          radius);
-                else
-                    atom = set_fluid_cell_empty (f_pos,
-                                                 nFluids,
-                                                 1,
-                                                 c,
-                                                 g_nCell,
-                                                 g_origin,
-                                                 g_h,
-                                                 atom);
-                awef--;
-            } 
+        {
+            for (int c = 0; c < g_tCell; ++c)
+                {
+                    if (gGrid->head[c] != -1)
+                        atom = set_fluid_cell_with_particles (f_pos,
+                                                              nFluids,
+                                                              1,
+                                                              c,
+                                                              g_nCell,
+                                                              g_origin,
+                                                              g_h,
+                                                              atom,
+                                                              radius);
+                    else
+                        atom = set_fluid_cell_empty (f_pos,
+                                                     nFluids,
+                                                     1,
+                                                     c,
+                                                     g_nCell,
+                                                     g_origin,
+                                                     g_h,
+                                                     atom);
+                    awef--;
+                    if (!awef)
+                        break ;
+                } 
+        }
+
+
+    for (int i = 0; i < nFluids; ++i)
+        printf (">%d pos (%f %f %f)\n", i, f_pos[i].x, f_pos[i].y, f_pos[i].z);
+
+
+    adentu_grid_cuda_set_atoms (gGrid, grain, &model->bCond);
+    adentu_grid_cuda_set_atoms (fGrid, fluid, &model->bCond);
+
+    g_message ("Differences between grains and fluids");
+    vec3f asdf;
+    for (int x = 0; x < f_tCell; ++x)
+        {
+            //g_message ("fCell: %d", x);
+            awef = f_head[x];
+            while (awef != -1)
+                {
+                    //g_message ("awef: %d", awef);
+                    for (int y = 0; y < g_tCell; ++y)
+                        {
+                            //g_message ("gGrid: %d", y);
+                            vecSub (asdf, g_pos[g_head[y]], f_pos[awef]);
+                            if (vecMod (asdf) < radius)
+                                g_error ("cellF: %d, cellG: %d G:%d F:%d\n pos[g]: %f %f %f, pos[f]: %f %f %f",
+                                x, y, y, awef, g_pos[y].x, g_pos[y].y, g_pos[y].z, 
+                                               f_pos[x].x, f_pos[x].y, f_pos[x].z);
+                        }
+                    awef = f_linked[awef];
+                }
+        }
 
 }
 
@@ -240,13 +316,19 @@ int set_fluid_cell_with_particles (vec3f *pos,
         r = sqrt (d.x*d.x + d.y*d.y + d.z*d.z);
         if (r > g_radius)
             {
+                if (atom == 32)
+                    printf ("d (%f, %f, %f), cell: %d, nCell: (%d, %d, %d)\n", 
+                            d.x, d.y, d.z, cell, nCell.x, nCell.y, nCell.z);
                 cPos.z = cell / (nCell.x * nCell.y);
                 cPos.y = (cell % (nCell.x * nCell.y)) / nCell.x;
                 cPos.x = (cell % (nCell.x * nCell.y)) % nCell.x;
-                
+
                 vecSet (aPos, cPos.x * h.x + origin.x + h.x/2 + d.x,
                               cPos.y * h.y + origin.y + h.y/2 + d.y,
                               cPos.z * h.z + origin.z + h.z/2 + d.z);
+                if (atom == 32)
+                    printf ("cPos (%d %d %d) aPos (%f %f %f)\n", 
+                            cPos.x, cPos.y, cPos.z, aPos.x, aPos.y, aPos.z);
 
                 pos[atom] = aPos;
                 ++atom;
@@ -255,6 +337,7 @@ int set_fluid_cell_with_particles (vec3f *pos,
     } 
     while (count < Nfcg);
 
+
     return atom;
 }
 
@@ -312,6 +395,9 @@ __global__ void adentu_usr_cuda_set_grain_pos_kernel (vec3f *pos,
 
     vec3f aPos;
     vec3i cPos;
+                if (idx == 2)
+                    printf ("cell: %d, nCell: (%d, %d, %d)\n", 
+                            idx, nCell.x, nCell.y, nCell.z);
 
     cPos.z = idx / (nCell.x * nCell.y);
     cPos.y = (idx % (nCell.x * nCell.y)) / nCell.x;
@@ -320,6 +406,9 @@ __global__ void adentu_usr_cuda_set_grain_pos_kernel (vec3f *pos,
     vecSet (aPos, cPos.x * h.x + origin.x + h.x/2,
                  cPos.y * h.y + origin.y + h.y/2,
                  cPos.z * h.z + origin.z + h.z/2);
+                if (idx == 2)
+                    printf ("cPos (%d %d %d) aPos (%f %f %f)\n", 
+                    cPos.x, cPos.y, cPos.z, aPos.x, aPos.y, aPos.z);
 
     pos[idx] = aPos;
     head[idx] = idx;
diff --git src/usr/atoms-pos-cuda.h src/usr/atoms-pos-cuda.h
index 4dc1dfb..100485a 100644
--- src/usr/atoms-pos-cuda.h
+++ src/usr/atoms-pos-cuda.h
@@ -26,4 +26,6 @@
 void adentu_usr_cuda_set_atoms_pos (AdentuModel *model);
 
 
+void adentu_usr_cuda_reset_device (void);
+
 #endif /* __ADENTU_USR_ATOMS_POS_CUDA_H__ */
diff --git src/usr/print-event-info.c src/usr/print-event-info.c
index 591b785..93cff4c 100644
--- src/usr/print-event-info.c
+++ src/usr/print-event-info.c
@@ -43,7 +43,7 @@ void print_post_event (AdentuModel *model, AdentuEvent *event)
 
     AdentuAtom *atom1, *atom2;
     
-    printf ("pos> type: %s, time: %f ", AdentuEventTypeStr[event->type],
+    printf ("pos> type: %s, time: %.10f ", AdentuEventTypeStr[event->type],
                                         event->time);
     
     if (event->type == ADENTU_EVENT_BC_GRAIN ||
@@ -59,6 +59,7 @@ void print_post_event (AdentuModel *model, AdentuEvent *event)
             printf (" Pos: ");
             print3f (atom1->pos[owner]);
             puts ("");
+            puts ("");
         }
     else
     if (event->type == ADENTU_EVENT_GGC ||
@@ -80,6 +81,7 @@ void print_post_event (AdentuModel *model, AdentuEvent *event)
             printf (" Partner Pos: ");
             print3f (atom2->pos[owner]);
             puts ("");
+            puts ("");
         }
 
 }
@@ -92,8 +94,8 @@ void print_pre_event (AdentuModel *model, AdentuEvent *event)
 
     AdentuAtom *atom1, *atom2;
     
-    printf ("pre> type: %s, time: %f ", AdentuEventTypeStr[event->type],
-                                        event->time);
+    printf ("pre> type: %s, time: %.10f ", AdentuEventTypeStr[event->type],
+                                        model->elapsedTime);
     
     if (event->type == ADENTU_EVENT_BC_GRAIN ||
         event->type == ADENTU_EVENT_BC_FLUID)
diff --git src/vec3-cuda.cu src/vec3-cuda.cu
index d9d07e1..1bc4f39 100644
--- src/vec3-cuda.cu
+++ src/vec3-cuda.cu
@@ -45,8 +45,9 @@ void vRand3f_cuda (vec3f *d_v, int n)
     curandState *d_states;
     CUDA_CALL (cudaMalloc ((void **)&d_states, n * sizeof (curandState)));
     
-    dim3 gDim (1);
-    dim3 bDim (n);
+    dim3 gDim;
+    dim3 bDim;
+    adentu_cuda_set_grid (&gDim, &bDim, n);
 
     set_seed<<<gDim, bDim>>> (d_states, time (NULL), n);
     vRand3f_cuda_generate<<<gDim, bDim>>> (d_v, d_states, n);
